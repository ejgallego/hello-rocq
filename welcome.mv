# Welcome to the coq-lsp Interactive Web Tutorial

Note that:

- running `coq-lsp` in the browser is still experimental, in
  particular expect some "Stack Overflows" until we fix the
  WebAssembly backend we use in jsCoq.

- in order for `coq-lsp` to be reactive, cross-origin-isolation needs
  to be enabled in VSCode; this seems to be the case in `vscode.dev`
  or `github.dev`, but don't hesitate to contacts us if you see
  `coq-lsp` doesn't respond when it should.

- the `jsCoq` package manager has not been ported, so you are limited
  to Coq's `Stdlib`.

- due to the previous issue, the total download size 180MiB, we will
  address this shortly, but be patient on your first run.

## First steps with `coq-lsp`

In order to use `coq-lsp`, web version, you first need to install the
`coq-lsp` extension. The extension should appear in the list of
recommended extensions.

Once you have the extension running, you should be able to do your
first proof:

```coq
Lemma easy_equality : 2 + 2 = 4.
Proof.

Qed.
```

Clicking inside the proof should allow you to see the goals. In this
case, fill the empty space with `simpl. reflexivity.`

Experienced Coq users would use `now reflexivity.` or `by [].`

Congratulations, you did your first formal proof with `coq-lsp`, web
version!

The rest of this tutorial, which is a work in-progress, will introduce
the most interesting `coq-lsp` features.

Stay tuned!

## Basic features and modes

### Literate document support

As you can see, `coq-lsp` can work with literate Markdown and LaTeX
Coq files in addition to regular Coq files. For example, in VSCode,
you can now press `Ctrl-Caps-P`, and run the command `Markdown Preview to the side`
to see this document rendered.

You can keep interacting and editing the document without fear.

### Goal display

`coq-lsp` will, by default, have the goals panel follow the
cursor. Some users may not prefer that, so we offer the following
settings to customize your proving experience:

- `coq-lsp.goal_after_tactic`: if `true`, show goals after the tactic at the cursor has been executed, if `false`, show goals _before.
- `coq-lsp.show_goals_on`: 0 to 3, meaning "don't follow cursor", "show on click", "show on click and cursor", and "show on click and command"

There is space to further improve the goals mode, `coq-lsp` engine
should be flexible enough to accommodate your workflow.

### Continuous and on-demand modes

`coq-lsp` can support both continuous or on-demand
checking. Continuous mode will minimize latency, however it can be
costly in terms of CPU use.

In `ondemand` mode, `coq-lsp` will only execute sentences when
information about them is demanded. In pure on-demand mode, users can
use the `M-n` and `M-p` keybindings to imitate the usual Proof General
mode (usually also setting `coq-lsp.show_goals_on` to 0).

`coq-lsp` also offers a very convenient intermediate mode, inspired by
Isabelle, that will check the part of the document that is on view.

This is a good compromise to minimize latency without doing too much
advance work.

`coq-lsp` engine doesn't internally distinguish between these two
modes, all it knows is to build a document to a point, which is set to
`End` when continuous mode is on.

Relevant options are:

- `coq-lsp.check_only_on_request`
- `coq-lsp.check_on_scroll`

### `_CoqProject` detection

In the Coq world, most projects are configured using a `_CoqProject`
file; you can point `coq-lsp` where your `_CoqProject` file is by
using the "open folder" feature of `coq-lsp`.

Note, this doesn't work (yet) in web mode.

## Error recovery

`coq-lsp` features advanced and programmable error recovery. For
example, lemmas that fail to `Qed` will be auto-admitted, and so will
bullets.

This is very convenient when working with large files, see:
```coq
Lemma i_am_broken : 3 = 4.
Proof.

Qed.

About i_am_broken.
```

## Incremental checking and proof editing

Error recovery works together with the proof engine as to allow some
interesting editing patterns. In particular, you can edit proof
enclosed in `Proof.` / `Qed.`, and the part of the document afterwards
won't be rechecked.

## LSP features

In progress, wanna help? Submit a Pull Request!

### Completion

### Code Actions

### Document Symbols

### Jump to Definition

Jump to definition is available inside the documents. In the desktop
version, jump to definition will also work on complete theories, but
this feature is not ready yet for the web version.

### Hover

`coq-lsp` will display information about a symbol when you hover over it.

Users can extend hover with their own plugins, and the amount of
information that is displayed is configurable in settings.

## More resources

There is a lot more under the hood, please check
[coq-lsp's project page](https://github.com/ejgallego/coq-lsp)
